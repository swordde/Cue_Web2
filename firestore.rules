rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Helper function to get normalized phone number  
    function getNormalizedPhone() {
      return request.auth.token.phone_number != null && 
             request.auth.token.phone_number.size() > 3 ? 
             request.auth.token.phone_number[3:] : 
             request.auth.token.phone_number;
    }
    
    // Users collection - secure but functional
    match /users/{userId} {
      // Allow reading for signup checks + own data access
      allow read: if request.auth != null && (
        // Admin can read all users
        isAdmin() ||
        // Users can read their own data by mobile/email match
        resource.data.mobile == getNormalizedPhone() ||
        resource.data.email == request.auth.token.email ||
        // Allow reading for signup duplicate checks (no resource data yet)
        !exists(/databases/$(database)/documents/users/$(userId))
      );
      
      // Allow writing own user data
      allow write: if request.auth != null && (
        // Admin can write all users
        isAdmin() ||
        // Users can write their own data
        request.resource.data.mobile == getNormalizedPhone() ||
        request.resource.data.email == request.auth.token.email
      );
    }
    
    // Bookings collection - users see only their bookings
    match /bookings/{bookingId} {
      allow read, write: if request.auth != null && (
        // Admin can access all bookings
        isAdmin() ||
        // Users can only access their own bookings
        resource.data.user == getNormalizedPhone() ||
        resource.data.user == request.auth.token.email ||
        // For new bookings, check the incoming data
        request.resource.data.user == getNormalizedPhone() ||
        request.resource.data.user == request.auth.token.email
      );
    }
    
    // Games collection - read by all, write by admin
    match /games/{gameId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Slots collection - read by all, write by admin
    match /slots/{slotId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Admin-only collections
    match /adminLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /offlineBookings/{bookingId} {
      allow read, write: if isAdmin();
    }
    
    // Fallback - deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 