rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - allow mobile-based lookup for custom auth
    match /users/{userId} {
      // Allow authenticated users to read/create/update users for login flow
      allow read, create: if request.auth != null;
      allow update: if request.auth != null 
        && !('clubCoins' in request.resource.data);  // Protect clubCoins only
    }
    
    // Bookings - protect coin fields but allow normal operations
    match /bookings/{bookingId} {
      allow read, create: if request.auth != null;
      allow update: if request.auth != null 
        && !('coinsAwarded' in request.resource.data)
        && !('coinsAwardedAt' in request.resource.data);  // Protect coin fields only
    }
    
    // Offline bookings - allow for authenticated users
    match /offlineBookings/{bookingId} {
      allow read, write: if request.auth != null;
    }
    
    // Games - read/write access for authenticated users
    match /games/{gameId} {
      allow read, write: if request.auth != null;
    }
    
    // Slots - read/write access for authenticated users  
    match /slots/{slotId} {
      allow read, write: if request.auth != null;
    }
    
    // Public occupancy - full access
    match /publicOccupancy/{bookingId} {
      allow read, write: if request.auth != null;
    }
    
    // Admin logs - admin only (but don't block if admin check fails)
    match /adminLogs/{logId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Allow access to any other collections for authenticated users
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}